name: Build & Release (Flutter Android APK + Windows ZIP)

on:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: write

concurrency:
  group: build-release-main
  cancel-in-progress: false

env:
  FLUTTER_VERSION: stable

jobs:
  android:
    name: Android APK
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.compute_version.outputs.version }}
      base_no_suffix: ${{ steps.compute_version.outputs.base_no_suffix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: ${{ env.FLUTTER_VERSION }}
          cache: true

      - name: Flutter doctor
        run: flutter doctor -v

      - name: Get dependencies
        run: flutter pub get

      - name: Analyze
        run: flutter analyze

      - name: Tests
        run: flutter test --concurrency=4

      - name: Calcular vers찾o din창mica incremental
        id: compute_version
        run: |
          set -euo pipefail
          echo "Branch atual: $GITHUB_REF_NAME"

          ORIGINAL_LINE=$(grep -E '^version:' pubspec.yaml)
          BASE_VERSION=$(echo "$ORIGINAL_LINE" | sed -E 's/version:[[:space:]]*([0-9]+\.[0-9]+\.[0-9]+).*/\1/')

          if [ "$GITHUB_REF_NAME" = "main" ]; then
            last_tag=$(git tag -l 'v[0-9]*.[0-9]*.[0-9]*' | sort -V | tail -n1 || true)
            [ -z "$last_tag" ] && last_tag="v0.0.0"
            last_tag_base=${last_tag#v}

            if [ "$(printf "%s\n%s\n" "$BASE_VERSION" "$last_tag_base" | sort -V | tail -n1)" = "$BASE_VERSION" ]; then
              ref_version="$BASE_VERSION"
            else
              ref_version="$last_tag_base"
            fi

            IFS='.' read -r MAJOR MINOR PATCH <<< "$ref_version"
            PATCH=$((PATCH + 1))
            NEW_BASE_VERSION="$MAJOR.$MINOR.$PATCH"
            SUFFIX="main"
          else
            NEW_BASE_VERSION="$BASE_VERSION"
            SUFFIX="dev"
          fi

          BUILD_NUM=${GITHUB_RUN_NUMBER}
          NEW_VERSION="${NEW_BASE_VERSION}-${SUFFIX}+${BUILD_NUM}"

          sed -i -E "s/^version:.*/version: ${NEW_VERSION}/" pubspec.yaml

          echo "version=${NEW_VERSION}" >> $GITHUB_OUTPUT
          echo "base_no_suffix=${NEW_BASE_VERSION}" >> $GITHUB_OUTPUT
          echo "Vers찾o final: $NEW_VERSION"
          grep '^version:' pubspec.yaml

      - name: Build APK (release)
        run: flutter build apk --release

      - name: Publicar artefato APK
        uses: actions/upload-artifact@v4
        with:
          name: android-apk
          path: build/app/outputs/flutter-apk/app-release.apk
          if-no-files-found: error
          retention-days: 7

  windows:
    name: Windows ZIP
    runs-on: windows-latest
    needs: android
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: ${{ env.FLUTTER_VERSION }}
          cache: true

      - name: Enable Windows
        run: flutter config --enable-windows-desktop

      - name: Get dependencies
        run: flutter pub get

      - name: Sincronizar vers찾o
        shell: pwsh
        run: |
          $version = "${{ needs.android.outputs.version }}"
          (Get-Content pubspec.yaml) -replace '^version:.*', "version: $version" | Set-Content pubspec.yaml
          Select-String -Path pubspec.yaml -Pattern '^version:'

      - name: Analyze
        run: flutter analyze

      - name: Build Windows (release)
        run: flutter build windows --release

      - name: Empacotar ZIP
        shell: pwsh
        run: |
          $target="build/windows/x64/runner/Release"
          $zip="windows-release.zip"
          Compress-Archive -Path "$target/*" -DestinationPath $zip
          Get-ChildItem $zip

      - name: Publicar artefato Windows
        uses: actions/upload-artifact@v4
        with:
          name: windows-zip
          path: windows-release.zip
          if-no-files-found: error
          retention-days: 7

  release:
    name: Release GitHub
    runs-on: ubuntu-latest
    needs: [android, windows]
    if: ${{ github.ref_name == 'main' }}
    steps:
      - name: Download APK
        uses: actions/download-artifact@v4
        with:
          name: android-apk
          path: dist/android

      - name: Download Windows ZIP
        uses: actions/download-artifact@v4
        with:
          name: windows-zip
          path: dist/windows

      - name: Listar arquivos
        run: find dist -type f -print

      - name: Criar release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.android.outputs.version }}
          name: Release v${{ needs.android.outputs.version }}
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            dist/android/app-release.apk
            dist/windows/windows-release.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
